{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`swc-input-submit` is composed by a native html input and button\nwhose styles are based in the “Sopra Steria Web Components” family.\n\nThe component has a functionality to enable the button when a regular expression is matched with the input value.\nThe component will be able to dispatch an event with introduced data.\n\n### Styling\n`swc-input-submit` provides the following custom properties and mixins for styling:\n\nCustom property                   | Description                                        | Default\n----------------------------------|----------------------------------------------------|------------------------------------------------\n`--main-color`                    | Background color of the button with default state  | #ff1727\n`--disabled-color`                | Background color of the button when is disabled    | #e9e9e9\n`--active-color`                  | Background color of the button when is active      | #ff8c94\n\nCustom Mixin                          | Description                                                         | Default\n--------------------------------------|---------------------------------------------------------------------|----------\n`--swc-input-submit`                  | Mixin applies to the component itself.                              |`{}`\n`--swc-input-submit-wrapper`          | Mixin applies to the container of input and button.                 |`{}`\n`--swc-input-submit-button`           | Mixin applies to the button.                                        |`{}`\n`--swc-input-submit-button-disabled`  | Mixin applies to the button when is disabled.                       |`{}`\n`--swc-input-submit-button-hover`     | Mixin applies to the button when is hover.                          |`{}`\n`--swc-input-submit-input`            | Mixin applies to the input.                                         |`{}`\n`--swc-input-submit-input-disabled`   | Mixin applies to the input when is disabled.                        |`{}`\n\n# Sopra Steria Web Component",
      "summary": "",
      "path": "swc-input-submit.js",
      "properties": [
        {
          "name": "_hasConnected",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 445,
              "column": 4
            },
            "end": {
              "line": 447,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_hasRequestedUpdate",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "hasUpdated",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 451,
              "column": 4
            },
            "end": {
              "line": 453,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "updateComplete",
          "type": "Promise",
          "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. This getter can be implemented to\nawait additional state. For example, it is sometimes useful to await a\nrendered element before fulfilling this Promise. To do this, first await\n`super.updateComplete` then any subsequent state.",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 502,
              "column": 4
            },
            "end": {
              "line": 504,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "value",
          "type": "String",
          "description": "The value of the data introduced in the input.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 3
            },
            "end": {
              "line": 48,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "disabled",
          "type": "Boolean",
          "description": "The disabled property for the input.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 3
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "placeholder",
          "type": "String",
          "description": "Specifies a short hint that describes the expected value of the input.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "autoFocus",
          "type": "Boolean",
          "description": "Specifies that the input element should automatically get focus when the page loads.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 3
            },
            "end": {
              "line": 69,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "buttonLabel",
          "type": "String",
          "description": "The text to put in the button.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 3
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "regExp",
          "type": "RegExp",
          "description": "The regex to validate the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "RegExp"
            }
          }
        },
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event triggered when the button is clicked.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 3
            },
            "end": {
              "line": 90,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "initialize",
          "description": "Performs element initialization. By default this calls `createRenderRoot`\nto create the element `renderRoot` node and captures any pre-set values for\nregistered properties.",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lit-element.js",
            "start": {
              "line": 91,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_saveInstanceProperties",
          "description": "Fixes any properties set on the instance before upgrade time.\nOtherwise these would shadow the accessor and break these properties.\nThe properties are stored in a Map which is played back after the\nconstructor runs. Note, on very old versions of Safari (<=9) or Chrome\n(<=41), properties created for native platform properties like (`id` or\n`name`) may not have default values set in the element constructor. On\nthese browsers native properties appear on instances and therefore their\ndefault value will overwrite any element default (e.g. if the element sets\nthis.id = 'id' in the constructor, the 'id' will become '' since this is\nthe native platform default).",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_applyInstanceProperties",
          "description": "Applies previously saved instance properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 295,
              "column": 4
            },
            "end": {
              "line": 301,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lit-element.js",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "disconnectedCallback",
          "description": "Allows for `super.disconnectedCallback()` in extensions while\nreserving the possibility of making non-breaking feature additions\nwhen disconnecting at some point in the future.",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 322,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Synchronizes property values when attributes change.",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 326,
              "column": 4
            },
            "end": {
              "line": 330,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "old"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyToAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 331,
              "column": 4
            },
            "end": {
              "line": 358,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "value"
            },
            {
              "name": "options",
              "defaultValue": "defaultPropertyDeclaration"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_attributeToProperty",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 377,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "requestUpdate",
          "description": "Requests an update which is processed asynchronously. This should\nbe called when an element should update based on some state not triggered\nby setting a property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored. Returns the `updateComplete` Promise which is resolved\nwhen the update completes.",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 418,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "description": "{PropertyKey} (optional) name of requesting property"
            },
            {
              "name": "oldValue",
              "description": "{any} (optional) old value of requesting property"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "A Promise that is resolved when the update completes."
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_enqueueUpdate",
          "description": "Sets up the element to asynchronously update.",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 444,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "performUpdate",
          "description": "Performs an element update.\n\nYou can override this method to change the timing of updates. For instance,\nto schedule updates to occur just before the next frame:\n\n```\nprotected async performUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.performUpdate();\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 467,
              "column": 4
            },
            "end": {
              "line": 485,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_markUpdated",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 486,
              "column": 4
            },
            "end": {
              "line": 489,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "shouldUpdate",
          "description": "Controls whether or not `update` should be called when the element requests\nan update. By default, this method always returns `true`, but this can be\ncustomized to control when to update.\n\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 512,
              "column": 4
            },
            "end": {
              "line": 514,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_changedProperties"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "update",
          "description": "Updates the element. This method reflects property values to attributes\nand calls `render` to render DOM via lit-html. Setting properties inside\nthis method will *not* trigger another update.\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lit-element.js",
            "start": {
              "line": 157,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "updated",
          "description": "Invoked whenever the element is updated. Implement to perform\npost-updating tasks via DOM APIs, for example, focusing an element.\n\nSetting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 541,
              "column": 4
            },
            "end": {
              "line": 542,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "firstUpdated",
          "description": "Invoked when the element is first updated. Implement to perform one time\nwork on the element after update.\n\nSetting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n\n* @param _changedProperties Map of changed properties with old values",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 552,
              "column": 4
            },
            "end": {
              "line": 553,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "createRenderRoot",
          "description": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lit-element.js",
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Element | DocumentFragment)",
            "desc": "Returns a node into which to render."
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "adoptStyles",
          "description": "Applies styling to the element shadowRoot using the `static get styles`\nproperty. Styling will apply using `shadowRoot.adoptedStyleSheets` where\navailable and will fallback otherwise. When Shadow DOM is polyfilled,\nShadyCSS scopes styles and adds them to the document. When Shadow DOM\nis available but `adoptedStyleSheets` is not, styles are appended to the\nend of the `shadowRoot` to [mimic spec\nbehavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lit-element.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 142,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 1
            },
            "end": {
              "line": 183,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "_checkRegex",
          "description": "Enables the button if the input value matches the regular expression.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 1
            },
            "end": {
              "line": 194,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "String",
              "description": "The last value in the input."
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "_handleInputChange",
          "description": "Fires an event when the input change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 1
            },
            "end": {
              "line": 206,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handlePressEnter",
          "description": "Fires an event when click Enter Key.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 1
            },
            "end": {
              "line": 217,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fireEvent",
          "description": "Fires an event giving the input value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 1
            },
            "end": {
              "line": 233,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [
        {
          "name": "_ensureClassProperties",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 116,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "createProperty",
          "description": "Creates a property accessor on the element prototype if one does not exist.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 134,
              "column": 4
            },
            "end": {
              "line": 165,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "options",
              "defaultValue": "defaultPropertyDeclaration"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "finalize",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "node_modules/lit-element/lit-element.js",
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "LitElement"
        },
        {
          "name": "_attributeNameForProperty",
          "description": "Returns the property name for the given attribute `name`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 211,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_valueHasChanged",
          "description": "Returns true if a property should request an update.\nCalled when a property value is set and uses the `hasChanged`\noption for the property if present or a strict identity check.",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 225,
              "column": 4
            },
            "end": {
              "line": 227,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "old"
            },
            {
              "name": "hasChanged",
              "defaultValue": "notEqual"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyValueFromAttribute",
          "description": "Returns the property value for the given attribute value.\nCalled via the `attributeChangedCallback` and uses the property's\n`converter` or `converter.fromAttribute` property option.",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 234,
              "column": 4
            },
            "end": {
              "line": 239,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_propertyValueToAttribute",
          "description": "Returns the attribute value for the given property value. If this\nreturns undefined, the property will *not* be reflected to an attribute.\nIf this returns null, the attribute will be removed, otherwise the\nattribute will be set to the value.\nThis uses the property's `reflect` and `type.toAttribute` property options.",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lib/updating-element.js",
            "start": {
              "line": 248,
              "column": 4
            },
            "end": {
              "line": 257,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "options"
            }
          ],
          "inheritedFrom": "UpdatingElement"
        },
        {
          "name": "_getUniqueStyles",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "node_modules/lit-element/lit-element.js",
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 85,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "LitElement"
        }
      ],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 234,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "SwcInputSubmit",
      "attributes": [
        {
          "name": "value",
          "description": "The value of the data introduced in the input.",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 3
            },
            "end": {
              "line": 48,
              "column": 4
            }
          },
          "metadata": {},
          "type": "String"
        },
        {
          "name": "disabled",
          "description": "The disabled property for the input.",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 3
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "placeholder",
          "description": "Specifies a short hint that describes the expected value of the input.",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "metadata": {},
          "type": "String"
        },
        {
          "name": "auto-focus",
          "description": "Specifies that the input element should automatically get focus when the page loads.",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 3
            },
            "end": {
              "line": 69,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "button-label",
          "description": "The text to put in the button.",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 3
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "metadata": {},
          "type": "String"
        },
        {
          "name": "reg-exp",
          "description": "The regex to validate the input value.",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {},
          "type": "RegExp"
        },
        {
          "name": "event-name",
          "description": "The name of the event triggered when the button is clicked.",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 3
            },
            "end": {
              "line": 90,
              "column": 4
            }
          },
          "metadata": {},
          "type": "String"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "eventName",
          "description": "Fires an event giving the input value.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "swc-input-submit"
    }
  ]
}
